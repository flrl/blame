#!/usr/bin/env perl
# a wrapper for git-blame that distinctly colourises commit annotations

use warnings;
use strict;

use open ':encoding(UTF-8)';

sub ansic
{
    return "\033["
           . join(';', map { int $_ } @_)
           . 'm';
}

sub commit_colour
{
    my ($sha1) = @_;
    my $c0 = substr($sha1, 0, 1) eq '^' ? 1 : 0;

    no warnings 'portable'; # quiet 64 bit ints please
    return (38, 5, 17 + hex(substr($sha1, $c0, 16)) % 214);
}

sub tag_colour
{
    my ($tag) = @_;

    # djb2
    my $hash = 5381;
    foreach my $c (split q{}, $tag) {
        $hash = ($hash * 33 + ord $c) % 4294967296;
    }

    return (38, 5, 17 + $hash % 214);
}

my %tagcache;

open(my $gtpipe, '-|',
        'git', 'tag', '-l', '--format=%(objectname) %(refname:lstrip=2)')
    or die "cannot exec git tag: $!";
while (<$gtpipe>) {
    chomp;
    my ($sha1, $tag) = split /\s+/, $_, 2;
    $tagcache{$sha1} = $tag;
}
close $gtpipe;

open(my $blame, '-|', 'git', 'blame', '--abbrev=40', @ARGV)
    or die "cannot exec git blame: $!";

my $pager = $ENV{GIT_PAGER} // $ENV{PAGER};
if (-t STDOUT and $pager) {
    $ENV{LESS} //= 'FRSX';

    open(my $out, '|-', $pager)
        or die "cannot exec $pager: $!";
    select $out;
}

my $sha1len;
while (<$blame>) {
    my ($sha1, $author, $date, $space, $lineno, $line) =
        split /\s\((.*?)\s*(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d [-+]\d\d\d\d)(\s+)(\d+)\)/, $_, 2;

    $sha1len //= length $sha1;

    my $tag = $tagcache{$sha1} // q{};

    if ($tag) {
        print ansic(tag_colour($tag));
        printf "%-*.*s %-19.19s $date", $sha1len, $sha1len, $tag, $author;
        print ansic(0);
    }
    else {
        print ansic(commit_colour($sha1));
        printf "$sha1 %-19.19s $date", $author;
        print ansic(0);
    }

    print $space;
    print ansic(38,5,240), $lineno, ')', ansic(0);
    print $line;
}
