#!/usr/bin/env perl
# a wrapper for git-blame that distinctly colourises commit annotations

use warnings;
use strict;

use open ':encoding(UTF-8)';

use Date::Format;

sub ansic
{
    return "\033["
           . join(';', map { int $_ } @_)
           . 'm';
}

sub commit_colour
{
    my ($sha1) = @_;
    my $c0 = substr($sha1, 0, 1) eq '^' ? 1 : 0;

    no warnings 'portable'; # quiet 64 bit ints please
    return (38, 5, 17 + hex(substr($sha1, $c0, 16)) % 214);
}

my %tagcache;
my %commits;

open(my $gtpipe, '-|',
        'git', 'tag', '-l', '--format=%(objectname) %(refname:lstrip=2)')
    or die "cannot exec git tag: $!";
while (<$gtpipe>) {
    chomp;
    my ($sha1, $tag) = split /\s+/, $_, 2;
    $tagcache{$sha1} = $tag;
}
close $gtpipe;

my $pager = $ENV{GIT_PAGER} // $ENV{PAGER};
if (-t STDOUT and $pager) {
    $ENV{LESS} //= 'FRSX';

    open(my $out, '|-', $pager)
        or die "cannot exec $pager: $!";
    select $out;
}

open(my $blame, '-|', 'git', 'blame', '--porcelain', @ARGV)
    or die "cannot exec git blame: $!";

my ($sha1, $lineno);
while (<$blame>) {
    if (m{^
          ([0-9a-zA-Z]{40})     # sha1
          \s \d+                # original line number
          \s (\d+)              # current line number
          (?: \s \d+ )?         # consecutive lines from this commit
          $}x)
    {
        # header
        ($sha1, $lineno) = ($1, $2);
    }
    elsif (m{^ \t (.*) $}x) {
        # it's actually the line, print it out?
        # FIXME don't know how many columns to allow for line number though...

        my $line = $1;
        my $tag = $tagcache{$sha1};
        my $date = time2str('%Y-%m-%d %H:%M:%S %z',
                            $commits{$sha1}->{'author-time'},
                            $commits{$sha1}->{'author-tz'});
        my $author = $commits{$sha1}->{'author'};

        print ansic(commit_colour($sha1));
        printf "%-12.12s %-19.19s %s", $tag // $sha1, $author, $date;
        print ansic(0);

        print " ";
        print ansic(38,5,240), $lineno, ') ', ansic(0);
        print $line, "\n";
    }
    else {
        # header metadata
        chomp;
        my ($key, $value) = split /\s/, $_, 2;
        $commits{$sha1}->{$key} = $value;
    }
}
